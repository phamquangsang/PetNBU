apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

apply plugin: 'com.google.firebase.firebase-perf'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500"
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/groups/staging" }
}

android {
    compileSdkVersion 28
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testBuildType "staging"
    defaultConfig {
        applicationId "com.petnbu.petnbu"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        // Specifies the fully-qualified class name of the test instrumentation runner.
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true //important

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            buildConfigField "String", "FIREBASE_STORAGE_URL", "\"gs://pet-lovers-4edb2.appspot.com\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        staging {
            initWith debug
            buildConfigField "String", "FIREBASE_STORAGE_URL", "\"gs://pet-lovers-staging.appspot.com\""
            manifestPlaceholders = [hostName: "com.staging.petnbu"]
            applicationIdSuffix ".debugStaging"
        }
    }
    dataBinding {
        enabled = true
    }
}

//configurations.all {
//    resolutionStrategy {
//        // force to use latest libs
//        eachDependency { DependencyResolveDetails details ->
//            def requested = details.requested
//            if (requested.group == 'com.android.support') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion "27.1.1"
//                }
//            }
//        }
//    }
//}

dependencies {
    def work_version = "1.0.0-alpha02"
    def room_version = "1.1.1-rc1"

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:0.3'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.1'
    implementation 'com.android.support:support-vector-drawable:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:support-emoji:27.1.1'
    implementation 'com.android.support:palette-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'

    implementation 'com.google.firebase:firebase-auth:15.0.0'
    implementation 'com.google.android.gms:play-services-auth:15.0.0'
    implementation 'com.google.firebase:firebase-firestore:15.0.0'
    implementation 'com.google.firebase:firebase-storage:15.0.0'
    implementation 'com.jakewharton.timber:timber:4.7.0'
    //dagger 2
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'
    // if you use the support libraries
    kapt 'com.google.dagger:dagger-android-processor:2.11'
    kapt 'com.google.dagger:dagger-compiler:2.11'
    // ViewModel and LiveData
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    // alternatively, just ViewModel
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    // alternatively, just LiveData
    implementation 'android.arch.lifecycle:livedata:1.1.1'
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"
    // Paging
    implementation 'android.arch.paging:runtime:1.0.0'
    // Test helpers for LiveData
    testImplementation 'android.arch.core:core-testing:1.1.1'
    // Test helpers for Room
    // Gson
    implementation 'com.google.code.gson:gson:2.8.4'
    //Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'
    //Circular ImageView
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    //Firebase JobDispatcher
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'
    implementation 'com.google.firebase:firebase-perf:15.0.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.2'
    implementation 'com.android.support:multidex:1.0.3'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    //WorkManager
    implementation "android.arch.work:work-runtime:$work_version" // use -ktx for Kotlin
    // optional - Firebase JobDispatcher support
    implementation "android.arch.work:work-firebase:$work_version"
    // optional - Test helpers
    androidTestImplementation "android.arch.work:work-testing:$work_version"

    //Room Persistent
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "android.arch.persistence.room:guava:$room_version"
    // Test helpers
    testImplementation "android.arch.persistence.room:testing:$room_version"
}

apply plugin: 'com.google.gms.google-services'
